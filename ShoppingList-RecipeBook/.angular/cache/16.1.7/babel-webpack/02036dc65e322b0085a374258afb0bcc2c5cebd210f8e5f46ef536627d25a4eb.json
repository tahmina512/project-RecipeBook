{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { map, tap, take, exhaustMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../recipe/recipe.service\";\nimport * as i3 from \"../auth/auth.service\";\nexport class DataStorageService {\n  constructor(http, recipeService, authService) {\n    this.http = http;\n    this.recipeService = recipeService;\n    this.authService = authService;\n  }\n  storeRecipes() {\n    const recipes = this.recipeService.getRecipes();\n    let data = recipes[0];\n    return this.http.post('http://localhost:3000/recipes', data) // Posting the first recipe\n    .subscribe(response => {\n      console.log(response);\n    }, error => {\n      console.error(error);\n    });\n  }\n  fetchRecipes() {\n    return this.authService.user.pipe(take(1), exhaustMap(user => {\n      return this.http.get('https://ng-recipe-book-ab93b-default-rtdb.firebaseio.com/recipes.json', {\n        params: new HttpParams().set('auth', user.token)\n      });\n    }), map(recipes => {\n      return recipes.map(recipe => {\n        return {\n          ...recipe,\n          ingredients: recipe.ingredients ? recipe.ingredients : []\n        };\n      });\n    }), tap(recipes => {\n      this.recipeService.setRecipes(recipes);\n    }));\n  }\n}\nDataStorageService.ɵfac = function DataStorageService_Factory(t) {\n  return new (t || DataStorageService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.RecipeService), i0.ɵɵinject(i3.AuthService));\n};\nDataStorageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataStorageService,\n  factory: DataStorageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpParams","map","tap","take","exhaustMap","DataStorageService","constructor","http","recipeService","authService","storeRecipes","recipes","getRecipes","data","post","subscribe","response","console","log","error","fetchRecipes","user","pipe","get","params","set","token","recipe","ingredients","setRecipes","i0","ɵɵinject","i1","HttpClient","i2","RecipeService","i3","AuthService","factory","ɵfac","providedIn"],"sources":["D:\\Angular\\project\\RecipeBook\\ShoppingList-RecipeBook\\src\\app\\shared\\data-storage.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { map, tap, take, exhaustMap } from 'rxjs/operators';\r\nimport { RecipeService } from '../recipe/recipe.service';\r\nimport { AuthService } from '../auth/auth.service';\r\nimport { Recipe } from '../recipe/recipe.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DataStorageService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private recipeService: RecipeService,\r\n    private authService: AuthService\r\n  ) {}\r\n  storeRecipes() {\r\n    const recipes = this.recipeService.getRecipes();\r\n    let data = recipes[0];\r\n\r\n    return this.http\r\n      .post('http://localhost:3000/recipes',data) // Posting the first recipe\r\n      .subscribe(\r\n        (response) => {\r\n          console.log(response);\r\n        },\r\n        (error) => {\r\n          console.error(error);\r\n        }\r\n      );\r\n  }\r\n\r\n  fetchRecipes() {\r\n    return this.authService.user.pipe(\r\n      take(1),\r\n      exhaustMap((user) => {\r\n        return this.http.get<Recipe[]>(\r\n          'https://ng-recipe-book-ab93b-default-rtdb.firebaseio.com/recipes.json',\r\n          {\r\n            params: new HttpParams().set('auth', user.token),\r\n          }\r\n        );\r\n      }),\r\n      map((recipes) => {\r\n        return recipes.map((recipe) => {\r\n          return {\r\n            ...recipe,\r\n            ingredients: recipe.ingredients ? recipe.ingredients : [],\r\n          };\r\n        });\r\n      }),\r\n      tap((recipes) => {\r\n        this.recipeService.setRecipes(recipes);\r\n      })\r\n    );\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;AAC7D,SAASC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAEC,UAAU,QAAQ,gBAAgB;;;;;AAM3D,OAAM,MAAOC,kBAAkB;EAC7BC,YACUC,IAAgB,EAChBC,aAA4B,EAC5BC,WAAwB;IAFxB,KAAAF,IAAI,GAAJA,IAAI;IACJ,KAAAC,aAAa,GAAbA,aAAa;IACb,KAAAC,WAAW,GAAXA,WAAW;EAClB;EACHC,YAAYA,CAAA;IACV,MAAMC,OAAO,GAAG,IAAI,CAACH,aAAa,CAACI,UAAU,EAAE;IAC/C,IAAIC,IAAI,GAAGF,OAAO,CAAC,CAAC,CAAC;IAErB,OAAO,IAAI,CAACJ,IAAI,CACbO,IAAI,CAAC,+BAA+B,EAACD,IAAI,CAAC,CAAC;IAAA,CAC3CE,SAAS,CACPC,QAAQ,IAAI;MACXC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;IACvB,CAAC,EACAG,KAAK,IAAI;MACRF,OAAO,CAACE,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,CACF;EACL;EAEAC,YAAYA,CAAA;IACV,OAAO,IAAI,CAACX,WAAW,CAACY,IAAI,CAACC,IAAI,CAC/BnB,IAAI,CAAC,CAAC,CAAC,EACPC,UAAU,CAAEiB,IAAI,IAAI;MAClB,OAAO,IAAI,CAACd,IAAI,CAACgB,GAAG,CAClB,uEAAuE,EACvE;QACEC,MAAM,EAAE,IAAIxB,UAAU,EAAE,CAACyB,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,KAAK;OAChD,CACF;IACH,CAAC,CAAC,EACFzB,GAAG,CAAEU,OAAO,IAAI;MACd,OAAOA,OAAO,CAACV,GAAG,CAAE0B,MAAM,IAAI;QAC5B,OAAO;UACL,GAAGA,MAAM;UACTC,WAAW,EAAED,MAAM,CAACC,WAAW,GAAGD,MAAM,CAACC,WAAW,GAAG;SACxD;MACH,CAAC,CAAC;IACJ,CAAC,CAAC,EACF1B,GAAG,CAAES,OAAO,IAAI;MACd,IAAI,CAACH,aAAa,CAACqB,UAAU,CAAClB,OAAO,CAAC;IACxC,CAAC,CAAC,CACH;EACH;;AA7CWN,kBAAkB,C;mBAAlBA,kBAAkB,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,aAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,WAAA;AAAA;AAAlBhC,kBAAkB,C;SAAlBA,kBAAkB;EAAAiC,OAAA,EAAlBjC,kBAAkB,CAAAkC,IAAA;EAAAC,UAAA,EADL;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}